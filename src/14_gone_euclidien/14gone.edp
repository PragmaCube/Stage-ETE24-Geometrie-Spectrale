int n = 55;
int nbrVP = 10;

real coeffb = sin(2 * pi / 7) / sin(4 * pi / 7);

complex[int] v(7);
v[0] = 1 - coeffb * exp(1i * pi / 7);
v[1] = exp(2i * pi / 7) - coeffb * exp(3i * pi / 7);
v[2] = exp(4i * pi / 7) - coeffb * exp(5i * pi / 7);
v[3] = exp(6i * pi / 7) - coeffb * exp(7i * pi / 7);
v[4] = exp(8i * pi / 7) - coeffb * exp(9i * pi / 7);
v[5] = exp(10i * pi / 7) - coeffb * exp(11i * pi / 7);
v[6] = exp(12i * pi / 7) - coeffb * exp(13i * pi / 7);

complex[int] points(14);
points[0] = 0;
points[1] = v[0];
points[2] = v[0] - v[5];
points[3] = v[0] - v[5] + v[1];
points[4] = v[0] - v[5] + v[1] - v[6];
points[5] = v[0] - v[5] + v[1] - v[6] + v[2];
points[6] = - v[5] + v[1] - v[6] + v[2];
points[7] = -v[5] + v[1] - v[6] + v[2] + v[3];
points[8] = -v[5] - v[6] + v[2] + v[3];
points[9] = -v[5] - v[6] + v[2] + v[3] + v[4];
points[10] = -v[5] - v[6] + v[3] + v[4];
points[11] = -v[6] + v[3] + v[4];
points[12] = -v[6] + v[4];
points[13] = v[4];

real[int] pentes(14);
int[int] obs(14);
int[int] cond(7);

for (int i = 0; i < 14; i++)
{
    pentes[i] = 1;
    obs[i] = 1;

    if (real(points[(i + 1) % 14] - points[i]) != 0.0)
    {
        pentes[i] = imag(points[(i + 1) % 14] - points[i]) / real(points[(i + 1) % 14] - points[i]);
        obs[i] = 0;
    }
}

for (int i = 0; i < 7; i++)
{
    cond[i] = 1;

    if (real(points[(2 * i + 5) % 14] - points[(2 * i + 1) % 14] != 0.0))
    {
        cond[i] = 0;
    }
}

border C1 (t = 0, real(points[1]) + (obs[0]) * imag(points[1])) {x = !obs[0] * t; y = pentes[0] * t; label = 1;};
border C2 (t = !obs[1] * real(points[1]) + obs[1] * imag(points[1]), !obs[1] * real(points[2]) + obs[1] * imag(points[2])) {x = !obs[1] * t + obs[1] * real(points[1]); y = pentes[1] * (t - !obs[1] * real(points[1])) + !obs[1] * imag(points[1]); label = 2;};
border C3 (t = !obs[2] * real(points[2]) + obs[2] * imag(points[2]), !obs[2] * real(points[3]) + obs[2] * imag(points[3])) {x = !obs[2] * t + obs[2] * real(points[2]); y = pentes[2] * (t - !obs[2] * real(points[2])) + !obs[2] * imag(points[2]); label = 3;};
border C4 (t = !obs[3] * real(points[3]) + obs[3] * imag(points[3]), !obs[3] * real(points[4]) + obs[3] * imag(points[4])) {x = !obs[3] * t + obs[3] * real(points[3]); y = pentes[3] * (t - !obs[3] * real(points[3])) + !obs[3] * imag(points[3]); label = 4;};
border C5 (t = !obs[4] * real(points[4]) + obs[4] * imag(points[4]), !obs[4] * real(points[5]) + obs[4] * imag(points[5])) {x = !obs[4] * t + obs[4] * real(points[4]); y = pentes[4] * (t - !obs[4] * real(points[4])) + !obs[4] * imag(points[4]); label = 5;};
border C6 (t = !obs[5] * real(points[5]) + obs[5] * imag(points[5]), !obs[5] * real(points[6]) + obs[5] * imag(points[6])) {x = !obs[5] * t + obs[5] * real(points[5]); y = pentes[5] * (t - !obs[5] * real(points[5])) + !obs[5] * imag(points[5]); label = 6;};
border C7 (t = !obs[6] * real(points[6]) + obs[6] * imag(points[6]), !obs[6] * real(points[7]) + obs[6] * imag(points[7])) {x = !obs[6] * t + obs[6] * real(points[6]); y = pentes[6] * (t - !obs[6] * real(points[6])) + !obs[6] * imag(points[6]); label = 7;};
border C8 (t = !obs[7] * real(points[7]) + obs[7] * imag(points[7]), !obs[7] * real(points[8]) + obs[7] * imag(points[8])) {x = !obs[7] * t + obs[7] * real(points[7]); y = pentes[7] * (t - !obs[7] * real(points[7])) + !obs[7] * imag(points[7]); label = 8;};
border C9 (t = !obs[8] * real(points[8]) + obs[8] * imag(points[8]), !obs[8] * real(points[9]) + obs[8] * imag(points[9])) {x = !obs[8] * t + obs[8] * real(points[8]); y = pentes[8] * (t - !obs[8] * real(points[8])) + !obs[8] * imag(points[8]); label = 9;};
border C10 (t = !obs[9] * real(points[9]) + obs[9] * imag(points[9]), !obs[9] * real(points[10]) + obs[9] * imag(points[9])) {x = !obs[9] * t + obs[9] * real(points[9]); y = pentes[9] * (t - !obs[9] * real(points[9])) + !obs[9] * imag(points[9]); label = 10;};
border C11 (t = !obs[10] * real(points[10]) + obs[10] * imag(points[10]), !obs[10] * real(points[11]) + obs[10] * imag(points[10])) {x = !obs[10] * t + obs[10] * real(points[10]); y = pentes[10] * (t - !obs[10] * real(points[10])) + !obs[10] * imag(points[10]); label = 11;};
border C12 (t = !obs[11] * real(points[11]) + obs[11] * imag(points[11]), !obs[11] * real(points[12]) + obs[11] * imag(points[11])) {x = !obs[11] * t + obs[11] * real(points[11]); y = pentes[11] * (t - !obs[11] * real(points[11])) + !obs[11] * imag(points[11]); label = 12;};
border C13 (t = !obs[12] * real(points[12]) + obs[12] * imag(points[12]), !obs[12] * real(points[13]) + obs[12] * imag(points[12])) {x = !obs[12] * t + obs[12] * real(points[12]); y = pentes[12] * (t - !obs[12] * real(points[12])) + !obs[12] * imag(points[12]); label = 13;};
border C14 (t = !obs[13] * real(points[13]) + obs[13] * imag(points[13]), !obs[13] * real(points[0]) + obs[13] * imag(points[13])) {x = !obs[13] * t + obs[13] * real(points[13]); y = pentes[13] * (t - !obs[13] * real(points[13])) + !obs[13] * imag(points[13]); label = 14;};

mesh Th = buildmesh(C1(n) + C2(n) + C3(n) + C4(n) + C5(n) + C6(n) + C7(n) + C8(n) + C9(n) + C10(n) + C11(n) + C12(n) + C13(n) + C14(n), fixeborder = true);

fespace Vh(Th, P2, periodic = [[1, !cond[0] * (x + real(points[5] - points[1])) + cond[0] * (imag(points[5] - points[1]))], [6, !cond[0] * x + cond[0] * y],
                                [3, !cond[1] * (x + real(points[7] - points[3])) + cond[1] * (imag(points[7] - points[3]))], [8, !cond[1] * x + cond[1] * y],
                                [5, !cond[2] * (x + real(points[9] - points[5])) + cond[2] * (imag(points[9] - points[5]))], [10, !cond[2] * x + cond[2] * y],
                                [7, !cond[3] * (x + real(points[11] - points[7])) + cond[3] * (imag(points[11] - points[7]))], [12, !cond[3] * x + cond[3] * y],
                                [9, !cond[4] * (x + real(points[13] - points[9])) + cond[4] * (imag(points[13] - points[9]))], [14, !cond[4] * x + cond[4] * y],
                                [11, !cond[5] * (x + real(points[1] - points[11])) + cond[5] * (imag(points[1] - points[11]))], [2, !cond[5] * x + cond[5] * y],
                                [13, !cond[6] * (x + real(points[3] - points[13])) + cond[6] * (imag(points[3] - points[13]))], [4, !cond[6] * x + cond[6] * y]]);


Vh u1, u2;
real sigma = 0.00001;
varf op(u1, u2) = int2d(Th)(dx(u1) * dx(u2) + dy(u1) * dy(u2) - sigma * u1 * u2);
varf b([u1], [u2]) = int2d(Th)(u1 * u2);
matrix OP = op (Vh, Vh, solver = Crout, factorize = 1);
matrix B = b(Vh, Vh, solver = CG, eps = 1e-20);
real[int] ev(nbrVP);
Vh[int] eV(nbrVP);
int k = EigenValue(OP, B, sym = true, sigma = sigma, value = ev, vector = eV, tol = 1e-10, maxit = 0, ncv = 0);

real aire = int2d(Th)(1);

for(int i = 0; i < k; i++)
{
    cout << ev[i] << " normalisation : " << ev[i] * aire << endl;

    if (ev[i] * aire > 10e-2)
    {
        break;
    }
}